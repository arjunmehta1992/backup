package com.example.googlefinnanceapi;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;

import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;

public class MainActivity extends Activity {

	private static final String TAG = "SingleStockWatchActivity";

	// This URL string points to the Google Stock API
	private static final String GOOGLE_STOCK_URL = "http://www.google.com/ig/api";

	// This URL is used when retrieving the stock activity chart image.
	private static final String GOOGLE_URL = "http://www.google.com";

	// These String constants refer to the XML elements we will be displaying
	private static final String SYMBOL = "symbol";
	private static final String COMPANY = "company";
	private static final String EXCHANGE = "exchange";
	private static final String VOLUME = "volume";
	private static final String LAST = "last";
	private static final String CHANGE = "change";
	private static final String PERC_CHANGE = "perc_change";
	private static final String CHART_URL = "chart_url";

	// This String refers to the attribute we are collecting for each element in
	// our XML
	private static final String DATA = "data";

	// This HashMap will store, in key-value pairs, the stock data we receive.
	private HashMap<String, String> hmStockData = new HashMap<String, String>();

	// This is the edit control that users will key into
	private EditText edSymbol = null;

	// This is the button that, when pressed, will request stock price data.
	private Button bnRetrieve = null;

	// This variable will hold the stock symbol value the user has keyed in.
	private String symbol = "";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		bnRetrieve = (Button) findViewById(R.id.bn_retrieve);

		edSymbol = (EditText) findViewById(R.id.edit_symbol);

		edSymbol.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence s, int start, int before,
					int count) {
				// TODO Auto-generated method stub

			}

			@Override
			public void beforeTextChanged(CharSequence s, int start, int count,
					int after) {
				// TODO Auto-generated method stub

			}

			@Override
			public void afterTextChanged(Editable s) {
				// TODO Auto-generated method stub
				symbol = edSymbol.getText().toString().trim();

				// if the user has entered at least one character, enable the
				// bnRetrieve button.
				// otherwise, disable it.
				bnRetrieve.setEnabled(symbol.length() > 0);

			}
		});
	}

	public void retrieveQuote(View vw) {

		// our "symbol" variable already has the text from the edSymbol view via
		// the onTextChanged() event capture.
		String request = GOOGLE_STOCK_URL + "?stock=" + symbol;

		StockRetrieveTask task = new StockRetrieveTask();

		task.execute(new String[] { request });

	}

	private void hideKeyboard() {

		// hide the soft keyboard, if it is currently visible.
		InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
		imm.hideSoftInputFromWindow(edSymbol.getWindowToken(),
				InputMethodManager.HIDE_NOT_ALWAYS);

	}

	private class StockRetrieveTask extends AsyncTask<String, Void, String> {

		private static final String TAG = "StockRetrieveTask";

		private ProgressDialog pDlg = null;

		@Override
		protected void onPreExecute() {

			Log.i(TAG, "onPreExecute");

			hideKeyboard();

			pDlg = createProgressDialog(MainActivity.this,
					getString(R.string.retrieving));

			super.onPreExecute();

		}

		@Override
		protected String doInBackground(String... urls) {

			Log.i(TAG, "doInBackground");

			StringBuilder sb = new StringBuilder();

			// Remember that the array will only have one String
			String url = urls[0];

			DefaultHttpClient client = new DefaultHttpClient();
			HttpGet httpGet = new HttpGet(url);

			try {
				HttpResponse execute = client.execute(httpGet);
				InputStream content = execute.getEntity().getContent();

				BufferedReader buffer = new BufferedReader(
						new InputStreamReader(content));

				String s = "";

				while ((s = buffer.readLine()) != null) {

					sb.append(s);

				}

			} catch (Exception e) {
				Log.e(TAG, e.getMessage(), e);
			}

			return sb.toString();
		}

		@Override
		protected void onPostExecute(String response) {

			readResponse(response);

			displayResponse();

			pDlg.dismiss();

		}

	}

}
