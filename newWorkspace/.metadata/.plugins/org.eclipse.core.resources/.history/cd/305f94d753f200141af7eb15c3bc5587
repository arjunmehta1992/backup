package com.example.shakechange;

import android.app.Activity;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Toast;

public class MainActivity extends Activity implements SensorEventListener {

	SensorManager sensorManager;
	boolean isColor = false;
	View view;
	long lastUpdate;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		view = findViewById(R.id.textView);
		view.setBackgroundColor(Color.GREEN);

		SensorManager manager = (SensorManager) getSystemService(SENSOR_SERVICE);
		lastUpdate = System.currentTimeMillis();

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onSensorChanged(SensorEvent event) {
		if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
			getAccelerometer(event);
		}

	}

	private void getAccelerometer(SensorEvent event) {

		float[] values = event.values;

		float x = values[0];
		float y = values[1];
		float z = values[2];
		
		
		float accelationSquareRoot = (x * x + y * y + z * z)  
	            / (SensorManager.GRAVITY_EARTH * SensorManager.GRAVITY_EARTH);  
	          
	        long actualTime = System.currentTimeMillis();  
	        Toast.makeText(getApplicationContext(),String.valueOf(accelationSquareRoot)+" "+  
	                    SensorManager.GRAVITY_EARTH,Toast.LENGTH_SHORT).show();  
	          
	        if (accelationSquareRoot >= 2) //it will be executed if you shuffle  
	        {  
	            
	          if (actualTime - lastUpdate < 200) {  
	            return;  
	          }  
	          lastUpdate = actualTime;//updating lastUpdate for next shuffle  
	           if (isColor) {  
	            view.setBackgroundColor(Color.GREEN);  
	  
	          } else {  
	            view.setBackgroundColor(Color.RED);  
	          }  
	          isColor = !isColor;  
	        }  

	}

	
	
	@Override
	protected void onResume() {
		super.onResume();
		 sensorManager.registerListener(this,sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),  
                 SensorManager.SENSOR_DELAY_NORMAL);  		
	}
	
	
	@Override
	protected void onPause() {
	
		super.onPause();
		sensorManager.unregisterListener(this);
	}
	
	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {

	}
}
