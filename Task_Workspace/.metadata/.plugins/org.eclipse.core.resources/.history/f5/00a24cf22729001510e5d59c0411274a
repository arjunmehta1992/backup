package com.zaptech.lazyload;

import java.util.Collections;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import android.content.Context;
import android.os.Handler;
import android.widget.ImageView;

public class ImageLoader {

	
	
	MemoryCache memoryCache = new MemoryCache();
    
    FileCache fileCache;
     
    //Create Map (collection) to store image and image url in key value pair
    private Map<ImageView, String> imageViews = Collections.synchronizedMap(
                                           new WeakHashMap<ImageView, String>());
    ExecutorService executorService;
     
    //handler to display images in UI thread
    Handler handler = new Handler();
     
	
	
	
	
	public ImageLoader(Context context){
        
        fileCache = new FileCache(context);
         
        // Creates a thread pool that reuses a fixed number of
        // threads operating off a shared unbounded queue.
        executorService=Executors.newFixedThreadPool(5);
         
    }
	 final int stub_id=R.drawable.ic_launcher;
     
	    public void DisplayImage(String url, ImageView imageView)
	    {
	        //Store image and url in Map
	        imageViews.put(imageView, url);
	         
	        //Check image is stored in MemoryCache Map or not (see MemoryCache.java)
	        Bitmap bitmap = memoryCache.get(url);
	         
	        if(bitmap!=null){
	            // if image is stored in MemoryCache Map then
	            // Show image in listview row
	            imageView.setImageBitmap(bitmap);
	        }
	        else
	        {
	            //queue Photo to download from url
	            queuePhoto(url, imageView);
	             
	            //Before downloading image show default image
	            imageView.setImageResource(stub_id);
	        }
	    }
	         
	    private void queuePhoto(String url, ImageView imageView)
	    {
	        // Store image and url in PhotoToLoad object
	        PhotoToLoad p = new PhotoToLoad(url, imageView);
	         
	        // pass PhotoToLoad object to PhotosLoader runnable class
	        // and submit PhotosLoader runnable to executers to run runnable
	        // Submits a PhotosLoader runnable task for execution 
	         
	        executorService.submit(new PhotosLoader(p));
	    }
	     
	    //Task for the queue
	    private class PhotoToLoad
	    {
	        public String url;
	        public ImageView imageView;
	        public PhotoToLoad(String u, ImageView i){
	            url=u;
	            imageView=i;
	        }
	    }
}
