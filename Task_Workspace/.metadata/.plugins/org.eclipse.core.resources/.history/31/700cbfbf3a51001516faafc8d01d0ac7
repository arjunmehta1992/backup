package com.zaptech.database;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;

import android.R;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

public class DBModel extends SQLiteOpenHelper {

	private static SQLiteDatabase myDataBase;
	private static Context myContext;
	public int count = 0;
	public static String DATABASE_NAME = "";
	public static String DATABASE_PATH = "";

	public DBModel(Context context, String name, String path) {

		super(context, name, null, 1);
		DATABASE_NAME = name;
		DATABASE_PATH = path;
		DBModel.myContext = context;
		try {
			createDataBase();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// public static final String DATABASE_NAME = "newsdb";

	public static final String TABLE_HOMEITEMS = "homeitems";
	public static final String TABLE_HOMEITEMS_IMAGE = "homeitems_image";
	public static final String TABLE_MENUITEMS = "menu_items";
	public static final String TABLE_NEWSITEM = "newsitem";
	public static final String TABLE_NEWSIMAGE = "newsimage";
	public static final String TABLE_NEWSITEM_ITEM = "items";
	public static final String TABLE_HEADLINE = "headline";
	public static final String TABLE_DESCRIPTIONHTML = "descriptionhtml";
	public static final String TABLE_DESCRIPTION = "description";

	public static final String HOMEITEMS_ID = "id";
	public static final String HOMEITEMS_INCLUDE_IMAGE_IN_LAYOUT = "includeimageinlayout";
	public static final String HOMEITEMS_INCLUDE_TITLE_IN_LAYOUT = "includetitleinlayout";
	public static final String HOMEITEMS_INCLUDE_TEXT_IN_LAYOUT = "includetextinlayout";
	public static final String HOMEITEMS_IMAGE_POSITION = "imageposition";
	public static final String HOMEITEMS_TITLE_POSITION = "titleposition";
	public static final String HOMEITEMS_TEXT_POSITION = "textposition";
	public static final String HOMEITEMS_TITLE = "title";
	public static final String HOMEITEMS_TEXT = "text";
	public static final String HOMEITEMS_TEXTHTML = "textHTML";
	public static final String HOMEITEMS_TAB_POSITION = "tabposition";
	public static final String HOMEITEMS_TAB_TEXT = "tabtext";
	public static final String HOMEITEMS_TAB_ICON = "tabicon";
	public static final String HOMEITEMS_DATECHANGED = "datechanged";
	public static final String HOMEITEMS_ISDIRTY = "isdirty";
	public static final String HOMEITEMS_TEMP_UNIQUEUID = "tempuniqueuid";
	public static final String HOMEITEMS_TYPE = "type";
	public static final String HOMEITEMS_USE_TAB_ICON = "usetabicon";
	public static final String HOMEITEMS_SORT_POSITION = "sortposition";
	public static final String HOMEITEMS_ARCHIVED = "archived";
	public static final String HOMEITEMS_LIST_ICON = "listicon";

	public static final String HOMEITEMS_IMAGE_ID = "imageid";
	public static final String HOMEITEMS_IMAGE_WIDTH = "width";
	public static final String HOMEITEMS_IMAGE_HEIGHT = "height";
	public static final String HOMEITEMS_IMAGE_ORIGINAL_NAME = "originalname";
	public static final String HOMEITEMS_IMAGE_LOCATION_LOCAL = "locationlocal";
	public static final String HOMEITEMS_IMAGE_TYPE = "imagetype";
	public static final String HOMEITEMS_IMAGE_BASEURL = "baseurl";
	public static final String HOMEITEMS_IMAGE_MIMETYPE = "mimetype";
	public static final String HOMEITEMS_IMAGE_BASE64VERSION = "base64version";
	public static final String HOMEITEMS_IMAGE_ISDIRTY = "isdirty";
	public static final String HOMEITEMS_IMAGE_ARCHIVED = "archived";
	public static final String HOMEITEMS_IMAGE_NAME = "name";
	public static final String HOMEITEMS_IMAGE_FOREIGNid = "id";

	public static final String MENUITEMS_ID = "id";
	public static final String MENUITEMS_ITEM_NAME = "item_name";

	public static final String NEWSITEM_VIDEOS = "videos";
	public static final String NEWSITEM_SORTTYPE = "sortType";
	public static final String NEWSITEM_SHAREPOINTURL = "sharePointUrl";
	public static final String NEWSITEM_DISPLAYASGANTT = "displayAsGantt";
	public static final String NEWSITEM_ID = "id";
	public static final String NEWSITEM_TABPOSITION = "tabPosition";
	public static final String NEWSITEM_TABTEXT = "tabText";
	public static final String NEWSITEM_TABICON = "tabIcon";
	public static final String NEWSITEM_DATECHANGED = "dateChanged";
	public static final String NEWSITEM_ISDIRTY = "isDirty";
	public static final String NEWSITEM_TEMPUNIQUEUID = "tempUniqueUID";
	public static final String NEWSITEM_TYPE = "type";
	public static final String NEWSITEM_USETABICON = "useTabIcon";
	public static final String NEWSITEM_SORTPOSITION = "sortPosition";
	public static final String NEWSITEM_ARCHIVED = "archived";
	public static final String NEWSITEM_LISTICON = "listIcon";

	public static final String ITEMS_ID = "id";
	public static final String ITEMS_URL = "url";
	public static final String ITEMS_DATEPUBLISHED = "datePublished";
	public static final String ITEMS_DATECHANGED = "dateChanged";
	public static final String ITEMS_ISDIRTY = "isDirty";
	public static final String ITEMS_EVENTFLAG = "eventFlag";
	public static final String ITEMS_EVENTDATE = "eventDate";
	public static final String ITEMS_PUBLISHTOFACEBOOK = "publishToFacebook";
	public static final String ITEMS_TEMPUNIQUEUID = "tempUniqueUID";
	public static final String ITEMS_EVENTDATEFINISH = "eventDateFinish";
	public static final String ITEMS_SORTPOSITION = "sortPosition";
	public static final String ITEMS_ARCHIVED = "archived";
	public static final String ITEMS_LISTICON = "listIcon";
	public static final String ITEMS_NEWSITEM_ID = "newsitem_id";

	public static final String NEWSIMAGE_WIDTH = "width";
	public static final String NEWSIMAGE_HEIGHT = "height";
	public static final String NEWSIMAGE_ORIGINALNAME = "originalName";
	public static final String NEWSIMAGE_LOCATIONLOCAL = "locationLocal";
	public static final String NEWSIMAGE_TYPE = "type";
	public static final String NEWSIMAGE_BASEURL = "baseURL";
	public static final String NEWSIMAGE_MIMETYPE = "mimeType";
	public static final String NEWSIMAGE_BASE64VERSION = "base64Version";
	public static final String NEWSIMAGE_ISDIRTY = "isDirty";
	public static final String NEWSIMAGE_ARCHIVED = "archived";
	public static final String NEWSIMAGE_ID = "id";
	public static final String NEWSIMAGE_NAME = "name";

	public static final String ID = "item_id";

	public static final String HEADLINES_THESTRING = "theString";

	public static final String DESCRIPTION_THESTRING = "theString";

	public static final String DESCRIPTIONHTML_THESTRING = "theString";

	/*
	 * public DBModel(Context context) { super(context, DATABASE_NAME, null, 4);
	 * 
	 * }
	 */
	public void createDataBase() throws IOException {

		// ---Check whether database is already created or not---
		boolean dbExist = checkDataBase();

		if (!dbExist) {
			this.getReadableDatabase();
			try {
				// ---If not created then copy the database---
				copyDataBase();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	private boolean checkDataBase() {
		try {
			String myPath = DATABASE_PATH + DATABASE_NAME;
			File f = new File(myPath);
			if (f.exists())
				return true;
			else
				return false;
		} catch (SQLiteException e) {
			e.printStackTrace();
			return false;
		}
	}

	// --- Copy the database to the output stream---
	private void copyDataBase() throws IOException {

		InputStream myInput = myContext.getAssets().open(DATABASE_NAME);

		String outFileName = DATABASE_PATH + DATABASE_NAME;

		OutputStream myOutput = new FileOutputStream(outFileName);

		byte[] buffer = new byte[1024];
		int length;
		while ((length = myInput.read(buffer)) > 0) {
			myOutput.write(buffer, 0, length);
		}

		myOutput.flush();
		myOutput.close();
		myInput.close();

	}

	public static void openDataBase() throws SQLException {

		// --- Open the database---
		String myPath = DATABASE_PATH + DATABASE_NAME;
		myDataBase = SQLiteDatabase.openDatabase(myPath, null,
				SQLiteDatabase.OPEN_READWRITE);

	}

	@Override
	public synchronized void close() {

		if (myDataBase != null)
			myDataBase.close();

		super.close();

	}

	@Override
	public void onCreate(SQLiteDatabase db) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		// TODO Auto-generated method stub

	}

}
