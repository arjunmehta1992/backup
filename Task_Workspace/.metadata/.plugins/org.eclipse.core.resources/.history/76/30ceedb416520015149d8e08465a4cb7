package com.zaptech.webviewdemo;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.entity.BufferedHttpEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Text;

import com.danielme.android.webviewdemo.R;
import com.zaptech.database.DBModel;
import com.zaptech.model.Bookmark;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.app.SearchManager;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.graphics.Bitmap;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.speech.RecognizerIntent;
import android.text.method.QwertyKeyListener;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnLongClickListener;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.webkit.CookieManager;
import android.webkit.CookieSyncManager;
import android.webkit.DownloadListener;
import android.webkit.URLUtil;
import android.webkit.WebChromeClient;
import android.webkit.WebIconDatabase;
import android.webkit.WebSettings.PluginState;
import android.webkit.WebView;
import android.webkit.WebView.HitTestResult;
import android.webkit.WebViewClient;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

public class WebViewDemoActivity extends Activity {
	private WebView webview;

	private ProgressBar progressBar;

	private EditText urlEditText;

	private List<Link> historyStack;

	private ArrayAdapter<Link> dialogArrayAdapter;

	private Button stopButton;
	private final int REQ_CODE_SPEECH_INPUT = 100;

	private ImageView faviconImageView;
	private Button bookmarkStar;
	String mUrl;
	private LinkHolder holder;
	private Link link;
	private Bookmark objBookmarkModel;
	ArrayList<String> matches_text;

	private DBModel objDBMODEL;
	private View dialogView;
	private Editor edit;
	ListView lstList;
	String search_item;

	AlertDialog.Builder builder;
	Dialog match_text_dialog;

	SharedPreferences sharedpreferences;
	String title;

	String arraySite = new String();
	ArrayList<Bookmark> arrListBookmark;

	ArrayList<String> listOfSite;

	LayoutInflater inflaterBookmarkList;

	private static final Pattern urlPattern = Pattern
			.compile("^(https?|ftp|file)://(.*?)");

	private static final int REQUEST_CODE = 1234;

	@SuppressLint({ "SetJavaScriptEnabled", "NewApi" })
	@Override
	public void onCreate(Bundle savedInstanceState) {
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);

		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		init();

		historyStack = new LinkedList<Link>();
		sharedpreferences = getSharedPreferences("MyPrefs",
				Context.MODE_PRIVATE);
		listOfSite = new ArrayList<String>();

		inflaterBookmarkList = (LayoutInflater) WebViewDemoActivity.this
				.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		webview = (WebView) findViewById(R.id.webkit);
		faviconImageView = (ImageView) findViewById(R.id.favicon);

		urlEditText = (EditText) findViewById(R.id.url);
		progressBar = (ProgressBar) findViewById(R.id.progressbar);
		stopButton = ((Button) findViewById(R.id.stopButton));
		bookmarkStar = (Button) findViewById(R.id.bookmarkStar);

		builder = new AlertDialog.Builder(this);
		holder = new LinkHolder();

		// favicon, deprecated since Android 4.3 but it's still necesary O_O Â¿?

		WebIconDatabase.getInstance().open(
				getDir("icons", MODE_PRIVATE).getPath());

		// javascript and zoom

		webview.getSettings().setJavaScriptEnabled(true);
		webview.getSettings().setBuiltInZoomControls(true);

		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {
			webview.getSettings().setPluginState(PluginState.ON);
		} else {

			// IMPORTANT!! this method is no longer available since Android 4.3
			// so the code doesn't compile anymore
			// webview.getSettings().setPluginsEnab0led(true);

		}

		// downloads

		webview.setDownloadListener(new CustomDownloadListener());

		webview.setWebViewClient(new CustomWebViewClient());

		webview.setWebChromeClient(new WebChromeClient() {
			@Override
			public void onProgressChanged(WebView view, int progress) {
				progressBar.setProgress(0);
				FrameLayout progressBarLayout = (FrameLayout) findViewById(R.id.progressBarLayout);
				progressBarLayout.setVisibility(View.VISIBLE);
				WebViewDemoActivity.this.setProgress(progress * 1000);

				TextView progressStatus = (TextView) findViewById(R.id.progressStatus);
				progressStatus.setText(progress + " %");
				progressBar.incrementProgressBy(progress);

				if (progress == 100) {
					progressBarLayout.setVisibility(View.GONE);
				}

				WebViewDemoActivity.this.setTitle(view.getTitle());
			}

			@Override
			public void onReceivedTitle(WebView view, String title) {
				WebViewDemoActivity.this.setTitle(getString(R.string.app_name)
						+ " - " + WebViewDemoActivity.this.webview.getTitle());
				for (Link link : historyStack) {
					if (link.getUrl().equals(
							WebViewDemoActivity.this.webview.getUrl())) {
						link.setTitle(title);
					}
				}
			}

			@Override
			public void onReceivedIcon(WebView view, Bitmap icon) {
				faviconImageView.setImageBitmap(icon);
				view.getUrl();
				boolean b = false;
				ListIterator<Link> listIterator = historyStack.listIterator();
				while (!b && listIterator.hasNext()) {
					Link link = listIterator.next();
					if (link.getUrl().equals(view.getUrl())) {
						link.setFavicon(icon);
						b = true;
					}
				}
			}

		});

		// http://stackoverflow.com/questions/2083909/android-webview-refusing-user-input

		webview.setOnTouchListener(new View.OnTouchListener() {
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN:
				case MotionEvent.ACTION_UP:
					if (!v.hasFocus()) {
						v.requestFocus();
					}
					break;
				}
				return false;
			}

		});

		// Welcome page loaded from assets directory
		if (Locale.getDefault().getLanguage().equals("es")) {
			webview.loadUrl("https://www.google.com/");
		} else {
			webview.loadUrl("https://www.google.com/");
		}

		webview.requestFocus();

		// Longvclick listener

		webview.setOnLongClickListener(new OnLongClickListener() {
			@Override
			public boolean onLongClick(View v) {

				final WebView webview = (WebView) v;
				final HitTestResult result = webview.getHitTestResult();
				if (result.getType() == HitTestResult.SRC_IMAGE_ANCHOR_TYPE) {
					webview.setWebViewClient(new WebViewClient() {
						@Override
						public boolean shouldOverrideUrlLoading(WebView view,
								String url) {
							// 2. and here we get the url (remember to remove
							// the WebView client and return true so that the
							// hyperlink will not be really triggered)
							mUrl = url; // mUrl is a member variant of the
										// activity
							view.setWebViewClient(null);
							return true;
						}
					});
					// 1. the picture must be focused, so we simulate a DPAD
					// enter event to trigger the hyperlink
					KeyEvent event1 = new KeyEvent(KeyEvent.ACTION_DOWN,
							KeyEvent.KEYCODE_DPAD_CENTER);
					webview.dispatchKeyEvent(event1);
					KeyEvent event2 = new KeyEvent(KeyEvent.ACTION_UP,
							KeyEvent.KEYCODE_DPAD_CENTER);
					webview.dispatchKeyEvent(event2);
					// 3. now you can do something with the anchor url (and then
					// clear the mUrl for future usage)
					String url = mUrl;
					if (url != null) {
						Toast.makeText(webview.getContext(), url,
								Toast.LENGTH_SHORT).show();
					}

					mUrl = null;
				}
				return false;
			}
		});

	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if ((keyCode == KeyEvent.KEYCODE_BACK)) {
			finish();
		}
		return super.onKeyDown(keyCode, event);

	}

	void init() {
		String DB_NAME = getResources().getString(R.string.DB_NAME);
		String DB_PATH = getResources().getString(R.string.DB_PATH);
		objDBMODEL = new DBModel(WebViewDemoActivity.this, DB_NAME, DB_PATH);
		objBookmarkModel = new Bookmark();
		arrListBookmark = new ArrayList<Bookmark>();

	}

	@Override
	protected Dialog onCreateDialog(int id) {

		builder.setTitle(getString(R.string.history));
		builder.setPositiveButton(getString(R.string.clear),
				new OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						historyStack.clear();
					}
				});

		builder.setNegativeButton(R.string.close, null);

		dialogArrayAdapter = new ArrayAdapter<Link>(this, R.layout.history,
				historyStack) {
			@Override
			public View getView(int position, View convertView, ViewGroup parent) {
				// holder pattern

				if (convertView == null) {
					LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
					convertView = inflater.inflate(R.layout.history, null);

					holder.setUrl((TextView) convertView
							.findViewById(R.id.textView1));
					holder.setImageView((ImageView) convertView
							.findViewById(R.id.favicon));

					convertView.setTag(holder);
				} else {
					holder = (LinkHolder) convertView.getTag();
				}

				link = historyStack.get(position);

				// show title when available
				if (link.getTitle() != null) {
					holder.getUrl().setText(link.getTitle());
				} else {
					holder.getUrl().setText(link.getUrl());
				}
				Bitmap favicon = link.getFavicon();
				if (favicon == null) {
					holder.getImageView().setImageDrawable(
							super.getContext().getResources()
									.getDrawable(R.drawable.favicon_default));
				} else {
					holder.getImageView().setImageBitmap(favicon);
				}

				return convertView;
			}
		};

		builder.setAdapter(dialogArrayAdapter,
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int item) {
						webview.loadUrl(historyStack.get(item).getUrl());
						stopButton.setVisibility(View.VISIBLE);
					}

				});

		return builder.create();
	}

	@Override
	protected void onPrepareDialog(int id, Dialog dialog) {
		dialogArrayAdapter.notifyDataSetChanged();
		super.onPrepareDialog(id, dialog);
	}

	// back button
	@Override
	public void onBackPressed() {
		if (webview.canGoBack()) {
			webview.goBack();
		} else {
			super.onBackPressed();
		}
	}

	class CustomWebViewClient extends WebViewClient {
		// the current WebView will handle the url
		@Override
		public boolean shouldOverrideUrlLoading(WebView view, String url) {
			if (url.endsWith(".mp3") || url.endsWith(".aac")) {
				Intent intent = new Intent(Intent.ACTION_VIEW);
				intent.setDataAndType(Uri.parse(url), "audio/mpeg");
				startActivity(intent);
				return true;
			}
			return false;
		}

		// history and navigation buttons
		@Override
		public void onPageStarted(WebView view, String url, Bitmap favicon) {
			if (checkConnectivity()) {
				// resets favicon
				WebViewDemoActivity.this.faviconImageView
						.setImageDrawable(WebViewDemoActivity.this
								.getResources().getDrawable(
										R.drawable.favicon_default));
				// shows the current url
				WebViewDemoActivity.this.urlEditText.setText(url);

				// only one occurrence
				boolean b = false;
				ListIterator<Link> listIterator = historyStack.listIterator();
				while (listIterator.hasNext() && !b) {
					if (listIterator.next().getUrl().equals(url)) {
						b = true;
						listIterator.remove();
					}
				}
				Link link = new Link(url, favicon);
				historyStack.add(0, link);

				stopButton.setEnabled(true);
				updateButtons();
			}
		}

		@Override
		public void onPageFinished(WebView view, String url) {
			stopButton.setVisibility(View.INVISIBLE);
			updateButtons();
		}

		// handles unrecoverable errors
		@Override
		public void onReceivedError(WebView view, int errorCode,
				String description, String failingUrl) {
			AlertDialog.Builder builder = new AlertDialog.Builder(
					WebViewDemoActivity.this);
			builder.setMessage(description)
					.setPositiveButton((R.string.ok), null)
					.setTitle("onReceivedError");
			builder.show();
		}

	}

	public void go(View view) {
		// hides the keyboard
		InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);
		inputMethodManager.hideSoftInputFromWindow(
				urlEditText.getWindowToken(), 0);

		if (checkConnectivity()) {
			stopButton.setVisibility(View.VISIBLE);

			// http protocol by default
			if (!urlPattern.matcher(urlEditText.getText().toString()).matches()) {

				if (!urlEditText.getText().toString().contains(".")) {
					Log.i("contians", "----------------");

					new JsonSearchTask(urlEditText.getText().toString())
							.execute();

					// try {
					// Intent intent = new Intent(Intent.ACTION_WEB_SEARCH);
					// String term = urlEditText.getText().toString();
					// intent.putExtra(SearchManager.QUERY, term);
					// startActivity(intent);
					// } catch (Exception e) {
					// // TODO: handle exception
					// }

				} else {

					urlEditText.setText("http://"
							+ urlEditText.getText().toString());

				}
			}
			webview.loadUrl(urlEditText.getText().toString());
		}
	}

	public void back(View view) {
		if (checkConnectivity()) {
			webview.goBack();
		}
	}

	public void bookmarkStar(View view) {

		// Display dialog on specific location

		final Dialog dialog = new Dialog(WebViewDemoActivity.this);
		dialog.setContentView(R.layout.raw_bookmark);
		dialog.setTitle("Bookmark");

		// set the custom dialog components - text, image and button

		final EditText edtSiteName = (EditText) dialog
				.findViewById(R.id.edtBookmarkName);

		edtSiteName.setText(WebViewDemoActivity.this.getTitle());

		final EditText edtSiteUrl = (EditText) dialog
				.findViewById(R.id.edtBookmarkUrl);

		edtSiteUrl.setText(urlEditText.getText().toString());

		Button btnBookmark = (Button) dialog.findViewById(R.id.btnBookmark);

		Button btnCancel = (Button) dialog.findViewById(R.id.btnCancel);

		// if button is clicked, close the custom dialog

		btnCancel.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				dialog.dismiss();
			}
		});

		btnBookmark.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub

				objBookmarkModel.setSitename(edtSiteName.getText().toString());
				objBookmarkModel.setSiteurl(edtSiteUrl.getText().toString());

				objDBMODEL.insertBookmarklist(objBookmarkModel);

				dialog.dismiss();

			}
		});

		dialog.show();

	}

	public void forward(View view) {
		if (checkConnectivity()) {
			webview.goForward();
		}
	}

	public void stop(View view) {
		webview.stopLoading();
		Toast.makeText(this, getString(R.string.stopping), Toast.LENGTH_LONG)
				.show();
	}

	public void history(View view) {
		showDialog(0);
	}

	private void updateButtons() {
		Button backButton = (Button) WebViewDemoActivity.this
				.findViewById(R.id.backButton);

		if (webview.canGoBack()) {
			backButton.setVisibility(View.VISIBLE);
		} else {
			backButton.setVisibility(View.INVISIBLE);
		}

		Button forwardButton = (Button) WebViewDemoActivity.this
				.findViewById(R.id.forwardButton);

		if (webview.canGoForward()) {
			forwardButton.setVisibility(View.VISIBLE);
		} else {
			forwardButton.setVisibility(View.INVISIBLE);
		}
	}

	// DOWNLOAD MANAGER WITH ASYNCTASK

	class CustomDownloadListener implements DownloadListener {
		public void onDownloadStart(final String url, String userAgent,
				String contentDisposition, String mimetype, long contentLength) {
			AlertDialog.Builder builder = new AlertDialog.Builder(
					WebViewDemoActivity.this);

			builder.setTitle(getString(R.string.download));
			builder.setMessage(getString(R.string.question));
			builder.setCancelable(false)
					.setPositiveButton((R.string.ok),
							new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog,
										int id) {
									new DownloadAsyncTask().execute(url);
								}

							})
					.setNegativeButton((R.string.cancel),
							new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog,
										int id) {
									dialog.cancel();
								}
							});

			builder.create().show();

		}

	}

	private class DownloadAsyncTask extends AsyncTask<String, Void, String> {

		@Override
		protected String doInBackground(String... arg0) {
			String result = "";
			String url = arg0[0];

			if (Environment.getExternalStorageState().equals(
					Environment.MEDIA_MOUNTED)) {
				HttpClient httpClient = new DefaultHttpClient();
				HttpGet httpGet = new HttpGet(url);
				InputStream inputStream = null;
				FileOutputStream fileOutputStream = null;
				try {
					HttpResponse httpResponse = httpClient.execute(httpGet);

					BufferedHttpEntity bufferedHttpEntity = new BufferedHttpEntity(
							httpResponse.getEntity());

					inputStream = bufferedHttpEntity.getContent();

					String fileName = android.os.Environment
							.getExternalStorageDirectory().getAbsolutePath()
							+ "/webviewdemo";
					File directory = new File(fileName);
					File file = new File(directory, url.substring(url
							.lastIndexOf("/")));
					directory.mkdirs();

					// commons-io, I miss you :(
					fileOutputStream = new FileOutputStream(file);
					ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
					byte[] buffer = new byte[1024];
					int len = 0;

					while (inputStream.available() > 0
							&& (len = inputStream.read(buffer)) != -1) {
						byteArrayOutputStream.write(buffer, 0, len);
					}

					fileOutputStream.write(byteArrayOutputStream.toByteArray());
					fileOutputStream.flush();

					result = getString(R.string.result)
							+ file.getAbsolutePath();

					Log.i("Result===", "=>" + result);

				} catch (Exception ex) {
					Log.e(WebViewDemoActivity.class.toString(),
							ex.getMessage(), ex);
					result = ex.getClass().getSimpleName() + " "
							+ ex.getMessage();
				} finally {
					if (inputStream != null) {
						try {
							inputStream.close();
						} catch (IOException ex) {
							Log.e(WebViewDemoActivity.class.toString(),
									ex.getMessage(), ex);
							result = ex.getClass().getSimpleName() + " "
									+ ex.getMessage();
						}
					}
					if (fileOutputStream != null) {
						try {
							fileOutputStream.close();
						} catch (IOException ex) {
							Log.e(WebViewDemoActivity.class.toString(),
									ex.getMessage(), ex);
							result = ex.getClass().getSimpleName() + " "
									+ ex.getMessage();
						}
					}
				}
			} else {
				result = getString(R.string.nosd);
			}

			return result;
		}

		@Override
		protected void onPostExecute(String result) {
			AlertDialog.Builder builder = new AlertDialog.Builder(
					WebViewDemoActivity.this);
			builder.setMessage(result).setPositiveButton((R.string.ok), null)
					.setTitle(getString(R.string.download));
			builder.show();

		}

	}

	/**
	 * Checks networking status.
	 */
	private boolean checkConnectivity() {
		boolean enabled = true;

		ConnectivityManager connectivityManager = (ConnectivityManager) this
				.getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo info = connectivityManager.getActiveNetworkInfo();

		if ((info == null || !info.isConnected() || !info.isAvailable())) {
			enabled = false;
			Builder builder = new Builder(this);
			builder.setIcon(android.R.drawable.ic_dialog_alert);
			builder.setMessage(getString(R.string.noconnection));
			builder.setCancelable(false);
			builder.setNeutralButton(R.string.ok, null);
			builder.setTitle(getString(R.string.error));
			builder.create().show();
		}
		return enabled;
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.menu, menu);
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {

		switch (item.getItemId()) {
		case R.id.item1:

			return true;
		case R.id.item2:
			Toast.makeText(getApplicationContext(), "Cacshe is cleared",
					Toast.LENGTH_LONG).show();
			webview.clearCache(true);
			return true;

		case R.id.item3:
			Toast.makeText(getApplicationContext(), "Cookies is removed",
					Toast.LENGTH_LONG).show();

			CookieSyncManager.createInstance(this);
			CookieManager cookieManager = CookieManager.getInstance();
			cookieManager.removeAllCookie();

			return true;

		case R.id.item4:
			Toast.makeText(getApplicationContext(), "Settings",
					Toast.LENGTH_LONG).show();

			return true;

		default:

			return super.onOptionsItemSelected(item);

		}
	}

	public class BookmarkAdapter extends BaseAdapter {

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return arrListBookmark.size();
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return arrListBookmark.get(position);
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub

			LayoutInflater inflater = (LayoutInflater) WebViewDemoActivity.this
					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			convertView = inflater.inflate(R.layout.raw_bookmark_list, null);

			TextView textSiteName = (TextView) convertView
					.findViewById(R.id.txtBookmarkName);

			TextView textSiteUrl = (TextView) convertView
					.findViewById(R.id.txtBookmarkSiteurl);

			textSiteName.setText(arrListBookmark.get(position).getSitename()
					.toString());

			textSiteUrl.setText(arrListBookmark.get(position).getSiteurl()
					.toString());

			return convertView;
		}

	}

	public void micSearch(View view) {

		Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
		intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,
				RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
		intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());
		intent.putExtra(RecognizerIntent.EXTRA_PROMPT,
				getString(R.string.speech_prompt));
		try {
			startActivityForResult(intent, REQ_CODE_SPEECH_INPUT);
		} catch (ActivityNotFoundException a) {
			Toast.makeText(getApplicationContext(),
					getString(R.string.speech_not_supported),
					Toast.LENGTH_SHORT).show();
		}

	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {

		super.onActivityResult(requestCode, resultCode, data);
		switch (requestCode) {
		case REQ_CODE_SPEECH_INPUT: {
			if (resultCode == RESULT_OK && null != data) {

				ArrayList<String> result = data
						.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
				urlEditText.setText(result.get(0));
			}
			break;
		}

		}

	}

	public void bookmarkHistory(View view) {
		final Dialog dialog = new Dialog(WebViewDemoActivity.this);
		// loadBookmarkFromSharedPrefrence();

		arrListBookmark = objDBMODEL.getHomeItemsData();

		dialogView = inflaterBookmarkList.inflate(R.layout.raw_bookmarklist,
				null);
		dialog.setContentView(dialogView);

		// set the custom dialog components - text, image and button

		// if button is clicked, close the custom dialog

		lstList = (ListView) dialogView.findViewById(R.id.lstBookmark);

		ArrayAdapter<String> adpt = new ArrayAdapter<String>(
				WebViewDemoActivity.this, android.R.layout.simple_list_item_1,
				listOfSite);

		lstList.setAdapter(new BookmarkAdapter());

		Button btnCloseBookmark = (Button) dialogView
				.findViewById(R.id.btnCancelBookmarklist);
		Button btnClearBookmarkList = (Button) dialogView
				.findViewById(R.id.btnBookmarkClear);

		lstList.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {

				urlEditText.setText(arrListBookmark.get(position).getSiteurl()
						.toString());

				webview.loadUrl(arrListBookmark.get(position).getSiteurl()
						.toString());

				dialog.dismiss();

			}
		});

		btnCloseBookmark.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				dialog.dismiss();
				Toast.makeText(getApplicationContext(), "closed",
						Toast.LENGTH_LONG).show();
			}
		});

		btnClearBookmarkList.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {

				objDBMODEL.deleteAllBookmarks();
				arrListBookmark = objDBMODEL.getHomeItemsData();
				lstList.setAdapter(new BookmarkAdapter());

			}
		});

		dialog.show();
	}

	// class get from
	// http://android-er.blogspot.in/2012/09/google-search-with-custom-search-phase.html
	private class JsonSearchTask extends AsyncTask<Void, Void, Void> {

		String searchResult = "";
		String search_url = "http://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=";
		String search_query;

		JsonSearchTask(String item) {

			try {
				search_item = URLEncoder.encode(item, "utf-8");
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			search_query = search_url + search_item + "&rsz=10";
		}

		@Override
		protected Void doInBackground(Void... params) {
			// TODO Auto-generated method stub

			try {
				searchResult = ParseResult(sendQuery(search_query));
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			return null;

		}

		@Override
		protected void onPostExecute(Void result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			webview.loadData(searchResult, "text/html", "UTF-8");
		}

	}

	private String sendQuery(String query) throws IOException {
		String result = "";

		URL searchURL = new URL(query);

		HttpURLConnection httpURLConnection = (HttpURLConnection) searchURL
				.openConnection();

		if (httpURLConnection.getResponseCode() == HttpURLConnection.HTTP_OK) {
			InputStreamReader inputStreamReader = new InputStreamReader(
					httpURLConnection.getInputStream());
			BufferedReader bufferedReader = new BufferedReader(
					inputStreamReader, 8192);

			String line = null;
			while ((line = bufferedReader.readLine()) != null) {
				result += line;
			}

			bufferedReader.close();
		}

		return result;
	}

	private String ParseResult(String json) throws JSONException {
		String parsedResult = "";

		JSONObject jsonObject = new JSONObject(json);
		JSONObject jsonObject_responseData = jsonObject
				.getJSONObject("responseData");
		JSONArray jsonArray_results = jsonObject_responseData
				.getJSONArray("results");

		parsedResult += "Google Search APIs (JSON) for : <b>" + search_item
				+ "</b><br/>";
		parsedResult += "Number of results returned = <b>"
				+ jsonArray_results.length() + "</b><br/><br/>";

		for (int i = 0; i < jsonArray_results.length(); i++) {

			JSONObject jsonObject_i = jsonArray_results.getJSONObject(i);

			String iTitle = jsonObject_i.getString("title");
			String iContent = jsonObject_i.getString("content");
			String iUrl = jsonObject_i.getString("url");

			parsedResult += "<a href='" + iUrl + "'>" + iTitle + "</a><br/>";
			parsedResult += iContent + "<br/><br/>";
		}

		return parsedResult;
	}

}
